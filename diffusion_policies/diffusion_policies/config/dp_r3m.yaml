defaults:
  - _self_
  - task: lift_image_abs

name: train_diffusion_unet_image
_target_: diffusion_policies.workspace.train_diffusion_unet_image_workspace.TrainDiffusionUnetImageWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

horizon: 4
n_obs_steps: 2
n_action_steps: 4
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_global_cond: True

policy:
  _target_: diffusion_policies.policy.diffusion_unet_image_policy.DiffusionUnetImagePolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 50
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: epsilon # or sample

  obs_encoder:
    _target_: diffusion_policies.model_dp_umi.vision.multi_image_obs_encoder.MultiImageObsEncoder
    shape_meta: ${shape_meta}
    rgb_model:
      _target_: diffusion_policies.model_dp_umi.vision.model_getter.get_resnet
      name: resnet18
      weights: r3m
      frozen: false
    pretrained: true  # placeholder
    resize_shape: null
    # crop_shape: [76, 76]
    crop_shape: [212, 212]
    # constant center crop
    random_crop: True
    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: True

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policies.model_dp_umi.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64
  num_workers: 4
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: false
  pin_memory: true
  persistent_workers: true

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: False
  # optimization
  lr_scheduler: constant_with_warmup
  lr_warmup_steps: 500
  num_epochs: 8000
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  freeze_encoder: false  # always false
  # training loop control
  # in epochs
  rollout_every: 100000   # skip rollout
  checkpoint_every: null
  val_every: 1
  sample_every: 5
  # steps per epoch
  max_train_steps: 20000000   # overwrite n_epoch
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0
  save_video: False

logging:
  project: spatial_generalization
  group: dp_r3m
  name: ${exp_name}
  id: ${now:%Y.%m.%d-%H.%M.%S}_${exp_name}
  mode: online
  resume: false
  tags:
    # - ${exp_name}
    - ${task_name}
    - dp_r3m

checkpoint:
  topk:
    monitor_key: train_loss
    mode: min
    k: 20
    format_str: epoch={epoch:04d}-train_loss={train_loss:.3f}.ckpt
  save_last_ckpt: true
  save_last_snapshot: false

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
